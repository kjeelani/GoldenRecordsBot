from re import A
import discord, requests, random, os, traceback
from discord.ext import commands
import sqlite3 as sql

#TODO: Create lock on all these commands so only mods can use them
class Admin(commands.Cog):
	def __init__(self, bot):
		self.bot = bot
	
	 
  
	def db_util(self,mode,query):
		'''
		<mode>:
			-"insert" for adding rows to db\n
			-"update" for modifying rows of db\n
			-"select" for returning values from db (as a list of rows represented by tuples)\n
			-"delete" for removing rows from db\n
  		<query>: SQL query to excecute
    	'''
		#TODO: ADD BACKUP SQL METHOD
		conn = sql.connect('submissions.sql')
		c = conn.cursor()

		#print(query)
		to_return = None
		if mode.lower() == 'select':
			c.execute(query)
			to_return = c.fetchall()
			print(to_return)
		else:
			c.execute(query)

		conn.commit()
		conn.close()
		return to_return 
 
 
 
	@commands.command(name='clear_messages', aliases=["clear_m"])
	async def clear_messages(self, ctx, *, message: int):
		'''
		Enter <num_messages> to clear that number of messages
		'''
		await ctx.channel.purge(limit=min(100, message))
	
 
 
	@commands.command(name='clear_db')
	async def clear_db(self, ctx):
		'''
		NEVER, NEVER, NEVER USE THIS COMMAND!!! EVER!!! 
		'''
		self.db_util('delete',"DELETE FROM competitions")
		self.db_util('delete',"DELETE FROM submissions")


	#Make a way to back-up the JSON files
	@commands.command(name='create_comp', aliases=["crc"])
	async def create_comp(self, ctx, id: str, name: str, description: str, channel: discord.TextChannel=None):
		'''
		Sets up a new competition with parameters as follows:

		<id>: How people should refer to this competition when submitting (surround in " ") (ONLY ONE WORD)
		<name>: Competition Name/Theme (surround in " ") (CAN BE MULTIPLE WORDS)
		<description>: Give a short description of what is expected of the submission (surround in " ")
		OPTIONAL <channel>: If a channel is passed in, the competition details will be immediately posted in that channel
		'''
		if " " in id:
			ctx.send("Please enter a one-word competition ID with no spaces.")
			return
		try:
			os.mkdir(f'./audio/{id.lower()}')
			self.db_util('insert',f'INSERT INTO competitions VALUES ("{id.lower()}","{name}","{description}","FALSE")')
			await ctx.channel.send(f"The competition \"{name}\" has been created!")
		except Exception as e:
			print(e)
			await ctx.send("An error has occured. Perhaps this competition has already been created? Check your parameters once again if not.")

		if channel != None:
			await self.post_comp(ctx, id, channel)
 
	@commands.command(name='post_comp', aliases=['pc'])
	async def post_comp(self, ctx, comp_id: str, channel: discord.TextChannel):
		'''
		Make a post on a certain channel about the competition with parameters as follows:
  
		<comp_id>: Tag generated by creating the competition
		<channel>: Where to post the message
		'''
		try:
			theme, description = self.db_util('select', f'SELECT theme, description FROM competitions WHERE id = "{comp_id.lower()}"')[0]

			#Adith can format the message to his liking
			formatted_message = f"@everyone Time for a new beat battle!\n\nThe theme for this beat battle is: **{theme}**.\n\nIf you want to submit your track, use this competition id: **{comp_id.lower()}**\n\nHere is the rundown: {description}"
			await channel.send(formatted_message)
		except Exception as e:
			print(e)
			await ctx.channel.send("An error has occured. Perhaps the competition id was typed incorrectly?")
  
  
  
	@commands.command(name='close_comp', aliases=['cc'])
	async def close_comp(self, ctx, comp_id: str):
		'''
		Locks submissions
		'''
		try:
			self.db_util('update', f'UPDATE competitions SET closed = TRUE WHERE id = "{comp_id.lower()}"')
			name = self.db_util('select', f'SELECT theme FROM competitions WHERE id = "{comp_id.lower()}"')[0][0]

			await ctx.channel.send(f"{name} is locked.")
		except Exception as e:
			print(e)
			await ctx.channel.send("An error has occured. Perhaps the competition id was typed incorrectly?")

   
   
	@commands.command(name='reopen_comp', aliases=['rc'])
	async def reopen_comp(self, ctx, comp_id: str):
		'''
		Reopens submissions
		'''
		try:
			self.db_util('update', f'UPDATE competitions SET closed = FALSE WHERE id = "{comp_id.lower()}"')
			name = self.db_util('select', f'SELECT theme FROM competitions WHERE id = "{comp_id.lower()}"')[0][0]

			await ctx.channel.send(f"{name} is unlocked.")
		except Exception as e:
			print(e)
			await ctx.channel.send("An error has occured. Perhaps the competition id was typed incorrectly?")
	
 
 
	@commands.command(name='release_submissions', aliases=['rs'])
	async def release_submissions(self, ctx, comp_id: str, channel: discord.TextChannel):
		'''
		Makes a post on <channel> with all the submissions for <comp_id> (surround with " ")
  
		It will send one message for each submission and will add a reaction to it for users to vote with.
    	'''
		#TODO: ADD BETTER EXCEPTION TESTING TO ALL COMMANDS
		#Adith: Message is up to you to decide
		submission_data = self.db_util('select', f'SELECT username, title, description, audio_src FROM submissions WHERE comp_id="{comp_id.lower()}"')
		if len(submission_data) == 0 or () in submission_data:
			await ctx.send('An error has occured. Please enter a valid competition id.')
			return


		try:
			for submission in submission_data:
				text_to_send = f'__Title:__ **{submission[1]}** by **{submission[0]}**\n\n__Description:__ {submission[2]}'
				message = await channel.send(file=discord.File(submission[3]), content=text_to_send)
				await message.add_reaction('ðŸ”¥')
    
			comp_name = self.db_util('select', f'SELECT theme FROM competitions WHERE id = "{comp_id.lower()}"')[0][0]
			await channel.send(f'@everyone Here are the submissions for {comp_name}! Please make sure to listen to ALL the submissions and vote for ONLY ONE submission!')
		except Exception as e:
			print(e)
			print(traceback.format_exc())
			await ctx.send('An error has occured. The data is corrupted, please contact the developers.')

async def setup(client):
    await client.add_cog(Admin(client))